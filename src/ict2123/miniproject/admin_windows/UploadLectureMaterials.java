/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ict2123.miniproject.admin_windows;

import ict2123.miniproject.DbConnector;
import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author josephlahiru
 */
public class UploadLectureMaterials extends javax.swing.JFrame {

    private Connection conn;
    private String userName, userType, pdf_path = null, relative_pdf_path = null;
    private int userID;

    /**
     * Creates new form UploadLectureMaterials
     */
    public UploadLectureMaterials() {
        initComponents();
        init();
        try {
            populateCourseCombo();
            populate_table();
            populateCourseMatirialCombo();
        } catch (SQLException ex) {
            Logger.getLogger(UploadLectureMaterials.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblLecturer = new javax.swing.JLabel();
        btnChoose = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        lblSelected = new javax.swing.JLabel();
        courseCombo = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        courseMaterialTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        metrialCombo = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBack.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblLecturer.setFont(new java.awt.Font("Segoe UI Emoji", 0, 48)); // NOI18N
        lblLecturer.setText("Insert Course Materials");

        btnChoose.setText("choose material");
        btnChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseActionPerformed(evt);
            }
        });

        btnUpload.setText("Upload Data");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        lblSelected.setText("Selected File : ");

        courseMaterialTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Material ID", "Course ID", "Material Path", "Timestamp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(courseMaterialTable);
        if (courseMaterialTable.getColumnModel().getColumnCount() > 0) {
            courseMaterialTable.getColumnModel().getColumn(0).setResizable(false);
            courseMaterialTable.getColumnModel().getColumn(0).setPreferredWidth(4);
            courseMaterialTable.getColumnModel().getColumn(1).setResizable(false);
            courseMaterialTable.getColumnModel().getColumn(1).setPreferredWidth(4);
            courseMaterialTable.getColumnModel().getColumn(2).setResizable(false);
            courseMaterialTable.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setText("Choose Course : ");

        jButton1.setText("Open File");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(metrialCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUpload)
                            .addComponent(lblSelected)
                            .addComponent(btnChoose)
                            .addComponent(courseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(77, Short.MAX_VALUE)
                        .addComponent(lblLecturer)
                        .addGap(77, 77, 77)
                        .addComponent(btnBack)))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLecturer)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(courseCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnChoose, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblSelected)
                        .addGap(47, 47, 47)
                        .addComponent(btnUpload, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(metrialCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed

        UpdateCourse update = new UpdateCourse();
        update.setUserNname(userName);
        update.setUserID(userID);
        update.setUserType("lecturer");
        update.init();
        update.show();
        dispose();

    }//GEN-LAST:event_btnBackActionPerformed

    private void btnChooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseActionPerformed
        JFileChooser filechooser = new JFileChooser();

        filechooser.setCurrentDirectory(new File("."));
        int response = filechooser.showOpenDialog(null);

        if (response == JFileChooser.APPROVE_OPTION) {
            pdf_path = filechooser.getSelectedFile().getAbsolutePath();
            System.out.println(pdf_path);

            String path_data[] = pdf_path.split("/");
            relative_pdf_path = path_data[(path_data.length) - 1];

            if (!"pdf".equals(relative_pdf_path.split("\\.")[1])) {
                JOptionPane.showMessageDialog(null, "Only PDFs can be inserted !!!", "Warning !!!", JOptionPane.WARNING_MESSAGE);
            } else {
                lblSelected.setText("<html>Selected File : <br>" + relative_pdf_path + "</html>");
            }
        }
    }//GEN-LAST:event_btnChooseActionPerformed

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed

        if (pdf_path != null) {
            File source = new File(pdf_path);
            File dest = new File("src/ict2123/course_matrials/" + relative_pdf_path);

            String course_id = courseCombo.getSelectedItem().toString().split(":")[0];

            try {
                Files.copy(source.toPath(), dest.toPath(),
                        StandardCopyOption.REPLACE_EXISTING);

                String user_query = "INSERT INTO course_materials (course_id, metirial_path)"
                        + "VALUES('" + course_id + "', 'src/ict2123/course_matrials/" + relative_pdf_path + "');";

                Statement st1 = null;
                try {
                    st1 = conn.createStatement();
                } catch (SQLException ex) {
                    Logger.getLogger(CreateTimetable.class.getName()).log(Level.SEVERE, null, ex);
                }

                try {
                    if (!st1.execute(user_query)) {
                        System.out.println("Inserted data to course_materials table sucessfully.");
                        populate_table();
                        JOptionPane.showMessageDialog(null, "File upload successful !!!", "Success !!!", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        System.out.println("course_materials data insertion failed.");
                        JOptionPane.showMessageDialog(null, "File upload Failed !!!", "Error !!!", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(CreateTimetable.class.getName()).log(Level.SEVERE, null, ex);
                }

            } catch (IOException ex) {
                Logger.getLogger(UploadLectureMaterials.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a File First !!!", "Warning !!!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnUploadActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            
            String path=null;
            
            String get_course_data = "SELECT metirial_path FROM course_materials WHERE material_id='" + metrialCombo.getSelectedItem().toString() + "';";
            
            Statement st3 = conn.createStatement();
            ResultSet result3 = st3.executeQuery(get_course_data);
            
            while (result3.next()) {
                path = result3.getString("metirial_path");
            }
            
            if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File(path);
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                    Logger.getLogger(UploadLectureMaterials.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(UploadLectureMaterials.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void setUserNname(String uName) {
        this.userName = uName;
    }

    public void setUserID(int uID) {
        this.userID = uID;
    }

    public void setUserType(String uType) {
        this.userType = uType;
    }

    public void init() {
        setLocationRelativeTo(null);

        //btnUpdateData.setFocusable(false);
        DbConnector DbCon = new DbConnector();
        conn = DbCon.getConnection();
    }

    private void populateCourseCombo() throws SQLException {
        String get_course_data = "SELECT id, course_id FROM course;";

        Statement st3 = conn.createStatement();
        ResultSet result3 = st3.executeQuery(get_course_data);

        while (result3.next()) {
            int id = result3.getInt("id");
            String course_id = result3.getString("course_id");

            courseCombo.addItem(Integer.toString(id) + ":" + course_id);
        }
    }

    private void populateCourseMatirialCombo() throws SQLException {
        String get_course_data = "SELECT material_id FROM course_materials;";

        Statement st3 = conn.createStatement();
        ResultSet result3 = st3.executeQuery(get_course_data);

        while (result3.next()) {
            int material_id = result3.getInt("material_id");

            metrialCombo.addItem(Integer.toString(material_id));
        }
    }

    private void populate_table() throws SQLException {

        DefaultTableModel tblModel = (DefaultTableModel) courseMaterialTable.getModel();
        tblModel.setRowCount(0);

        String get_notice = "SELECT * FROM course_materials;";

        Statement st2 = conn.createStatement();
        ResultSet result2 = st2.executeQuery(get_notice);

        while (result2.next()) {
            int material_id = result2.getInt("material_id");
            String course_id = result2.getString("course_id");
            String metirial_path = result2.getString("metirial_path");
            String upload_date = result2.getString("upload_date");

            String table_data[] = {Integer.toString(material_id), course_id, metirial_path, upload_date};

            tblModel.addRow(table_data);
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UploadLectureMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UploadLectureMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UploadLectureMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UploadLectureMaterials.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UploadLectureMaterials().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnChoose;
    private javax.swing.JButton btnUpload;
    private javax.swing.JComboBox<String> courseCombo;
    private javax.swing.JTable courseMaterialTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblLecturer;
    private javax.swing.JLabel lblSelected;
    private javax.swing.JComboBox<String> metrialCombo;
    // End of variables declaration//GEN-END:variables
}
